import { useRef } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import { useGLTF, Stage, Grid, OrbitControls, Environment } from '@react-three/drei'
import { EffectComposer, Bloom, ToneMapping } from '@react-three/postprocessing'
import { easing } from 'maath'

export default function App() {
  return (
    <Canvas flat shadows camera={{ position: [-15, 0, 10], fov: 25 }}>
      <fog attach="fog" args={['black', 15, 22.5]} />
      <Stage intensity={0.5} environment="city" shadows={{ type: 'accumulative', bias: -0.001, intensity: Math.PI }} adjustCamera={false}>
        <Kamdo rotation={[0, -0.25*Math.PI, 0]} />
      </Stage>
      <Grid renderOrder={-1} position={[0, -1.85, 0]} infiniteGrid cellSize={0.6} cellThickness={0.6} sectionSize={3.3} sectionThickness={1.5} sectionColor={[0.5, 0.5, 10]} fadeDistance={30} />
      <OrbitControls autoRotate autoRotateSpeed={0.05} enableZoom={false} makeDefault minPolarAngle={Math.PI / 2} maxPolarAngle={Math.PI / 2} />
      <EffectComposer disableNormalPass>
        <Bloom luminanceThreshold={2} mipmapBlur />
        <ToneMapping />
      </EffectComposer>
      <Environment background preset="sunset" blur={0.8} />
    </Canvas>
  )
}

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.0 s2wt_kamdo_industrial_divinities.glb --transform --simplify
Author: Hansalex (https://sketchfab.com/Hansalex)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/s2wt-kamdo-industrial-divinities-f503b70ac05e49a38c81100d71599a1b
Title: S2WT "Kamdo" (Industrial Divinities)
*/

function Kamdo(props) {
  const head = useRef()
  const stripe = useRef()
  const light = useRef()
  const { nodes, materials } = useGLTF('/old_computer.glb')
  useFrame((state, delta) => {
    const t = (1 + Math.sin(state.clock.elapsedTime * 2)) / 2
    // stripe.current.color.setRGB(2 + t * 20, 2, 20 + t * 50)
    easing.dampE(head.current.rotation, [0, state.pointer.x * (state.camera.position.z > 1 ? 1 : -1), 0], 0.4, delta)
    // light.current.intensity = 1 + t * 4
  })

  return (
    // <group {...props}>
    //   <mesh castShadow receiveShadow geometry={nodes.MonitorFrontPart.geometry} material={materials.White} />
    //   <mesh castShadow receiveShadow geometry={nodes.MonitorBackPart} material={materials.White} />
    //   {/*<group ref={head}>*/}
    //   {/*  <mesh castShadow receiveShadow geometry={nodes.head001.geometry} material={materials.Head} />*/}
    //   {/*  <mesh castShadow receiveShadow geometry={nodes.stripe001.geometry}>*/}
    //   {/*    <meshBasicMaterial ref={stripe} toneMapped={false} />*/}
    //   {/*    <pointLight ref={light} intensity={1} color={[10, 2, 5]} distance={2.5} />*/}
    //   {/*  </mesh>*/}
    //   {/*</group>*/}
    // </group>

    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.PCButton01.geometry}
        material={materials.Blue}
        position={[0.986, 0.873, 1.929]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.PCButton02.geometry}
        material={materials.Red}
        position={[1.49, 0.873, 1.949]}
      />
      <group ref={head}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.MonitorBackPart.geometry}
          material={materials.Grey}
          position={[0, 1.549, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.MonitorButton01.geometry}
          material={materials.Blue}
          position={[0.698, 1.892, 1.768]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.MonitorButton02.geometry}
          material={materials.Yellow}
          position={[1.01, 1.892, 1.768]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.MonitorFrontPart.geometry}
          material={materials.White}
          position={[0, 1.549, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.OuterScreen.geometry}
          material={materials.Grey}
          position={[0, 3.024, 1.749]}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.ScreenInner.geometry}
          material={materials.Black}
          position={[0, 3.024, 1.749]}
          rotation={[Math.PI / 2, 0, 0]}
        />
      </group>

      <mesh
        castShadow
        receiveShadow
        geometry={nodes.KeyboardBase.geometry}
        material={materials.White}
        position={[0, 0, 3.5]}
      />
      <group position={[0, 0, 3.5]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane021.geometry}
          material={materials.White}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane021_1.geometry}
          material={materials.Yellow}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane021_2.geometry}
          material={materials.DarkGrey}
        />
      </group>
      <group position={[3.267, 0, 3.313]} rotation={[0, 0.241, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane017.geometry}
          material={materials.Grey}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane017_1.geometry}
          material={materials.Grey}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.MouseSide.geometry}
        material={materials.Grey}
        position={[3.267, 0, 3.313]}
        rotation={[0, 0.241, 0]}
      />
      <group position={[3.267, 0, 3.313]} rotation={[0, 0.241, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane022.geometry}
          material={materials.Grey}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane022_1.geometry}
          material={materials.Grey}
        />
      </group>
      <group position={[3.267, 0, 3.313]} rotation={[0, 0.241, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane011.geometry}
          material={materials.White}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane011_1.geometry}
          material={materials.White}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane011_2.geometry}
          material={materials.White}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.MouseCable.geometry}
        material={materials.White}
        position={[1.272, 0.712, -2.003]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.PCPoint.geometry}
        material={materials.DarkGrey}
        position={[1.272, 0.712, -2.003]}
      />

      <mesh castShadow receiveShadow geometry={nodes.Plane023.geometry} material={materials.Grey} />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane023_1.geometry}
        material={materials.Grey}
      />
      <mesh castShadow receiveShadow geometry={nodes.Plane.geometry} material={materials.White} />
      <mesh castShadow receiveShadow geometry={nodes.Plane_1.geometry} material={materials.White} />
    </group>
  )
}

useGLTF.preload('/s2wt_kamdo_industrial_divinities-transformed.glb')
